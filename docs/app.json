[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly, output_widget, render_widget\nfrom shiny import render, App, reactive\nimport palmerpenguins # import the Palmer Penguin dataset\nimport seaborn as sns\n\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Gagnon-Vos Penguin Data\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\n\nwith ui.sidebar(open = \"open\"):\n    ui.h2(\"Sidebar\")\n\n# Use ui.input_selectize() to create a dropdown input to choose a column\n    \n    ui.input_selectize(\"selectized_attribute\", \"Select Attribute\", [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n\n# Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n\n    ui.input_numeric(\"plotly_bin_count\", \"Bin Count\", 10, min=1, max=20)\n\n# Use ui.input_slider() to create a slider input for the number of Seaborn bins\n\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 0, 100, 50)\n\n# Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n\n    ui.input_checkbox_group(\"selected_species_list\", \"Species\", [\"Adelie\", \"Gentoo\", \"Chinstrap\"], selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"], inline=False)\n\n#Create a checkbox group input to filter the species\n    ui.input_checkbox_group(\"island_list\", \"Island\", [\"Torgersen\", \"Biscoe\", \"Dream\"], selected=[\"Torgersen\", \"Biscoe\", \"Dream\"], inline=False)\n\n# Use ui.hr() to add a horizontal rule to the sidebar\n\n    ui.hr()\n\n# Use ui.a() to add a hyperlink to the sidebar\n\n    ui.a(\"Github\", href=\"https://github.com/lauravos/cintel-02-data\", target=\"_blank\")\n\n\n#DataTable\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Data Table\"):\n        @render.data_frame  \n        def penguins_dataTable():\n            return render.DataTable(filtered_data())  \n\n#DataGrid\n    with ui.nav_panel(\"Data Grid\"):\n        ui.h2(\"Palmer Penguins\")\n        @render.data_frame  \n        def penguins_dataGrid():\n            return render.DataGrid(filtered_data())  \n\n\n#Plotly Histogram\nwith ui.accordion(id=\"acc\", open=\"closed\"):\n    with ui.accordion_panel(\"Plotly Histogram\"):   \n\n        @render_widget  \n        def plotly():  \n            scatterplot = px.histogram(\n                data_frame=filtered_data(),\n                x=input.selectized_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            ).update_layout(\n                title={\"text\": \"Plotly Histogram\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=input.selectized_attribute()\n            )\n\n            return scatterplot  \n\n\n#Seaborn Histogram\n    with ui.accordion_panel(\"Seaborn Histogram\"):\n\n        @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n        def plotHistogram():  \n            ax = sns.histplot(data=filtered_data(), x=input.selectized_attribute(), bins=input.seaborn_bin_count())  \n            ax.set_title(\"Palmer Penguins\")\n            ax.set_xlabel(input.selectized_attribute())\n            ax.set_ylabel(\"Count\")\n            return ax  \n\n\n#Plotly Scatterplot\n\nwith ui.card(full_screen=True):\n\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        # Create a Plotly scatterplot using Plotly Express\n        # Call px.scatter() function\n        # Pass in six arguments:\n        fig = px.scatter(filtered_data(), x=input.selectized_attribute(), y=\"body_mass_g\", \n                         color=\"species\", title=\"Scatterplot\",labels={\"bill_length_mm\": \"Bill Length (mm)\", \"bill_depth_mm\": \"Bill Depth (mm)\", \"flipper_length_mm\": \"Flipper Length (mm)\",\n                         \"body_mass_g\": \"Body Mass (g)\"})\n        return fig\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    isSpeciesMatch = penguins_df[\"species\"].isin(input.selected_species_list()) & penguins_df[\"island\"].isin(input.island_list())\n    return penguins_df[isSpeciesMatch]\n", "type": "text"}]